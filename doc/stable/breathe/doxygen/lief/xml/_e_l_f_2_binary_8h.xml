<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.15.0" xml:lang="en-US">
  <compounddef id="_e_l_f_2_binary_8h" kind="file" language="C++">
    <compoundname>Binary.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="yes">LIEF/visibility.h</includes>
    <includes refid="_e_l_f_2enums_8h" local="yes">LIEF/ELF/enums.h</includes>
    <includes refid="_e_l_f_2_section_8h" local="yes">LIEF/ELF/Section.h</includes>
    <includes refid="_e_l_f_2_segment_8h" local="yes">LIEF/ELF/Segment.h</includes>
    <includes refid="_e_l_f_2_header_8h" local="yes">LIEF/ELF/Header.h</includes>
    <includes refid="_dynamic_entry_8h" local="yes">LIEF/ELF/DynamicEntry.h</includes>
    <includes refid="_e_l_f_2_symbol_8h" local="yes">LIEF/ELF/Symbol.h</includes>
    <includedby refid="_e_l_f_8h" local="yes">/src/api/c/include/LIEF/ELF.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/src/api/c/include/LIEF/ELF/Binary.h</label>
        <link refid="_e_l_f_2_binary_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>LIEF/ELF/DynamicEntry.h</label>
        <link refid="_dynamic_entry_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>LIEF/ELF/Header.h</label>
        <link refid="_e_l_f_2_header_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>LIEF/ELF/Section.h</label>
        <link refid="_e_l_f_2_section_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>LIEF/ELF/Segment.h</label>
        <link refid="_e_l_f_2_segment_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>LIEF/ELF/Symbol.h</label>
        <link refid="_e_l_f_2_symbol_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>LIEF/ELF/enums.h</label>
        <link refid="_e_l_f_2enums_8h_source"/>
      </node>
      <node id="12">
        <label>LIEF/types.h</label>
        <link refid="types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>LIEF/visibility.h</label>
      </node>
      <node id="9">
        <label>inttypes.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/src/api/c/include/LIEF/ELF.h</label>
        <link refid="_e_l_f_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/src/api/c/include/LIEF/ELF/Binary.h</label>
        <link refid="_e_l_f_2_binary_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/src/api/c/include/LIEF/LIEF.h</label>
        <link refid="_l_i_e_f_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_elf___binary__t" prot="public">Elf_Binary_t</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_e_l_f_2_binary_8h_1ab4e2d0591fbfec9ced6a6c9362fe3092" prot="public" static="no">
        <type>struct Elf_Binary_t</type>
        <definition>typedef struct Elf_Binary_t Elf_Binary_t</definition>
        <argsstring></argsstring>
        <name>Elf_Binary_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/src/api/c/include/LIEF/ELF/Binary.h" line="48" column="27" bodyfile="/src/api/c/include/LIEF/ELF/Binary.h" bodystart="48" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_e_l_f_2_binary_8h_1af7ed75e99e14191c28ea39fcca095a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_elf___binary__t" kindref="compound">Elf_Binary_t</ref> *</type>
        <definition>Elf_Binary_t * elf_parse</definition>
        <argsstring>(const char *file)</argsstring>
        <name>elf_parse</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wrapper for LIEF::ELF::Parser::parse </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/src/api/c/include/LIEF/ELF/Binary.h" line="51" column="15" declfile="/src/api/c/include/LIEF/ELF/Binary.h" declline="51" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="_e_l_f_2_binary_8h_1abb43b1d09a7e42e846a8e9a050b97776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void elf_binary_destroy</definition>
        <argsstring>(Elf_Binary_t *binary)</argsstring>
        <name>elf_binary_destroy</name>
        <param>
          <type><ref refid="struct_elf___binary__t" kindref="compound">Elf_Binary_t</ref> *</type>
          <declname>binary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/src/api/c/include/LIEF/ELF/Binary.h" line="53" column="7" declfile="/src/api/c/include/LIEF/ELF/Binary.h" declline="53" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_e_l_f_2_binary_8h_1aafb05be6c71b05ff0fadb06c3090c17d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int elf_binary_save_header</definition>
        <argsstring>(Elf_Binary_t *binary)</argsstring>
        <name>elf_binary_save_header</name>
        <param>
          <type><ref refid="struct_elf___binary__t" kindref="compound">Elf_Binary_t</ref> *</type>
          <declname>binary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update LIEF::ELF::Header object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/src/api/c/include/LIEF/ELF/Binary.h" line="56" column="6" declfile="/src/api/c/include/LIEF/ELF/Binary.h" declline="56" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>2017<sp/>-<sp/>2025<sp/>R.<sp/>Thomas</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2017<sp/>-<sp/>2025<sp/>Quarkslab</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIEF_C_ELF_BINARY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIEF_C_ELF_BINARY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LIEF/visibility.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LIEF/ELF/enums.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LIEF/ELF/Section.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LIEF/ELF/Segment.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LIEF/ELF/Header.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LIEF/ELF/DynamicEntry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LIEF/ELF/Symbol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="struct_elf___binary__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_elf___binary__t" kindref="compound">Elf_Binary_t</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpreter;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="struct_elf___header__t" kindref="compound">Elf_Header_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="struct_elf___section__t" kindref="compound">Elf_Section_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>**sections;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="struct_elf___segment__t" kindref="compound">Elf_Segment_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>**segments;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="struct_elf___dynamic_entry__t" kindref="compound">Elf_DynamicEntry_t</ref><sp/>**dynamic_entries;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="struct_elf___symbol__t" kindref="compound">Elf_Symbol_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**dynamic_symbols;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="struct_elf___symbol__t" kindref="compound">Elf_Symbol_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**symtab_symbols;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_elf___binary__t" kindref="compound">Elf_Binary_t</ref><sp/><ref refid="struct_elf___binary__t" kindref="compound">Elf_Binary_t</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">LIEF_API<sp/><ref refid="struct_elf___binary__t" kindref="compound">Elf_Binary_t</ref>*<sp/>elf_parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">LIEF_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>elf_binary_destroy(<ref refid="struct_elf___binary__t" kindref="compound">Elf_Binary_t</ref>*<sp/>binary);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">LIEF_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elf_binary_save_header(<ref refid="struct_elf___binary__t" kindref="compound">Elf_Binary_t</ref>*<sp/>binary);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/src/api/c/include/LIEF/ELF/Binary.h"/>
  </compounddef>
</doxygen>
